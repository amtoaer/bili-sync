import{_ as s,c as i,o as a,a3 as n}from"./chunks/framework.Bsyxd66g.js";const p="/assets/config._3EbYWXX.webp",y=JSON.parse('{"title":"快速开始","description":"","frontmatter":{},"headers":[],"relativePath":"quick-start.md","filePath":"quick-start.md","lastUpdated":1758732719000}'),e={name:"quick-start.md"},l=n(`<h1 id="快速开始" tabindex="-1">快速开始 <a class="header-anchor" href="#快速开始" aria-label="Permalink to &quot;快速开始&quot;">​</a></h1><p>程序使用 Rust 编写，不需要 Runtime 且内嵌 WebUI，并为各个平台提供了预编译的二进制文件，因此部署较为简单。</p><h2 id="程序获取" tabindex="-1">程序获取 <a class="header-anchor" href="#程序获取" aria-label="Permalink to &quot;程序获取&quot;">​</a></h2><p>程序为各个平台提供了预构建的二进制文件，并且打包了 <code>Linux/amd64</code> 与 <code>Linux/arm64</code> 两个平台的 Docker 镜像。用户可以自行选择使用哪种方式运行。</p><h3 id="其一-下载平台二进制文件运行" tabindex="-1">其一：下载平台二进制文件运行 <a class="header-anchor" href="#其一-下载平台二进制文件运行" aria-label="Permalink to &quot;其一：下载平台二进制文件运行&quot;">​</a></h3><div class="caution custom-block github-alert"><p class="custom-block-title">CAUTION</p><p>如果你使用这种方式运行，请确保 FFmpeg 已被正确安装且位于 PATH 中，可直接通过 <code>ffmpeg</code> 命令访问。</p></div><p>在<a href="https://github.com/amtoaer/bili-sync/releases" target="_blank" rel="noreferrer">程序发布页</a>选择最新版本中对应机器架构的压缩包，解压后会获取一个名为 <code>bili-sync-rs</code> 的可执行文件，直接双击执行。</p><h3 id="其二-使用-docker-compose-运行" tabindex="-1">其二：使用 Docker Compose 运行 <a class="header-anchor" href="#其二-使用-docker-compose-运行" aria-label="Permalink to &quot;其二：使用 Docker Compose 运行&quot;">​</a></h3><p>Linux/amd64 与 Linux/arm64 两个平台可直接使用 Docker 或 Docker Compose 运行，此处以 Compose 为例：</p><blockquote><p>请注意其中的注释，有不清楚的地方可以先继续往下看。</p></blockquote><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  bili-sync-rs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 不推荐使用 latest 这种模糊的 tag，最好直接指明版本号</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">amtoaer/bili-sync-rs:latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">unless-stopped</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    network_mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bridge</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 该选项请仅在日志终端支持彩色输出时启用，否则日志中可能会出现乱码</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    tty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 非必需设置项，推荐设置为宿主机用户的 uid 及 gid (\`$uid:$gid\`)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 可以执行 \`id \${user}\` 获取 \`user\` 用户的 uid 及 gid</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 程序下载的所有文件权限将与此处的用户保持一致，不设置默认为 Root</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1000:1000</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    hostname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bili-sync-rs</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    container_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bili-sync-rs</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 程序默认绑定 0.0.0.0:12345 运行 http 服务</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 可同时修改 compose 文件与 config.toml 变更服务运行的端口</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">12345:12345</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${你希望存储程序配置的目录}:/app/.config/bili-sync</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # metadata/people 正确挂载才能在 Emby 或 Jellyfin 中显示 UP 主头像</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 右边的目标目录不固定，只需要确保目标目录与 bili-sync 中填写的“UP 主头像保存路径”保持一致即可</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${Emby 或 Jellyfin 配置下的 metadata/people 目录}:/app/.config/bili-sync/upper_face</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 接下来可以挂载一系列用于保存视频的目录，接着在 bili-sync 中配置将视频下载到这些目录即可</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 例如：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # - /home/amtoaer/HDDs/Videos/Bilibilis/:/home/amtoaer/HDDs/Videos/Bilibilis/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 如果你使用的是群晖系统，请移除最后的 logging 配置，否则会导致日志不显示</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    logging</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      driver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;local&quot;</span></span></code></pre></div><p>使用该 compose 文件，执行 <code>docker compose up -d</code> 即可运行。</p><h2 id="进行必要配置" tabindex="-1">进行必要配置 <a class="header-anchor" href="#进行必要配置" aria-label="Permalink to &quot;进行必要配置&quot;">​</a></h2><p>运行程序，应该可以在日志中看到：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Jul 12 16:11:10  INFO 欢迎使用 Bili-Sync，当前程序版本：xxxxx</span></span>
<span class="line"><span>Jul 12 16:11:10  INFO 项目地址：https://github.com/amtoaer/bili-sync</span></span>
<span class="line"><span>Jul 12 16:11:10  INFO 数据库初始化完成</span></span>
<span class="line"><span>Jul 12 17:17:50  WARN 生成 auth_token：xxxxxxxx，可使用该 token 登录 web UI，该信息仅在首次运行时打印</span></span>
<span class="line"><span>Jul 12 16:11:10  INFO 配置初始化完成</span></span>
<span class="line"><span>Jul 12 16:11:10  INFO 开始运行管理页: http://0.0.0.0:12345</span></span></code></pre></div><p>中间应该会穿插一条 CONFIG 的报错，这是因为配置文件内容缺失导致视频下载任务未能运行，在初次启动时是正常现象。</p><p>自 2.6.0 版本开始，程序仅会创建一个数据库文件，配置同样在数据库表中进行维护。</p><p>数据库文件存储于 <code>\${config_dir}/bili-sync/data.sqlite</code>。</p><div class="caution custom-block github-alert"><p class="custom-block-title">CAUTION</p><p></p><p>请注意，<code>config_dir</code> 的实际位置与操作系统和用户名有关。</p><p>对于名为 Alice 的用户，<code>config_dir</code> 指向的位置是：</p><ul><li>Lin: <code>/home/Alice/.config</code></li><li>Win: <code>C:\\Users\\Alice\\AppData\\Roaming</code></li><li>Mac: <code>/Users/Alice/Library/Application Support</code></li></ul><p>特别的，在 Docker 环境中，<code>config_dir</code> 会被展开为 <code>/app/.config</code>。</p></div><p>接着打开 WebUI，切换到设置页，输入日志中打印的 <code>auth_token</code>，点击认证。</p><p><img src="`+p+'" alt="设置页"></p><p>认证后会看到一系列的配置，除绑定地址外的选项<strong>基本都会实时生效</strong>。为避免意料外的情况，建议将配置文件一次修改完毕后再点击保存。</p><p>如无特殊需求，一般仅需修改“B 站认证”与“视频质量”两个标签下的配置。</p><p>其中“B 站认证”在一次填写后即可忽略，程序会在<strong>每日第一次运行视频下载任务</strong>时检查认证状态，并在有必要时自动刷新。</p><p>对于这些设置项的含义，请参考<a href="./configuration">配置说明</a>，可善用右侧导航在不同配置项间跳转。</p><h2 id="添加视频源订阅" tabindex="-1">添加视频源订阅 <a class="header-anchor" href="#添加视频源订阅" aria-label="Permalink to &quot;添加视频源订阅&quot;">​</a></h2><p>配置完毕后，我们便可以随时添加视频源订阅。</p><p>用户在正确填写“B 站认证”后可以在“快捷订阅”部分查看自己创建的收藏夹、关注的合集与 UP 主一键订阅，也可以在“视频源”页手动添加并管理。</p><p>对于手动添加的视频源，可参考如下页面获取所需的参数：</p><ul><li><a href="./favorite">收藏夹</a></li><li><a href="./collection">合集 / 列表</a></li><li><a href="./submission">用户投稿</a></li></ul><p>添加完订阅就无需进行任何干预了，视频下载任务会在后台每隔特定时间（由配置中的“同步间隔”决定）自动运行一次，刷新并下载启用的视频源！</p>',31),t=[l];function h(k,o,c,r,d,g){return a(),i("div",null,t)}const u=s(e,[["render",h]]);export{y as __pageData,u as default};
